#### black ####################################################################
[tool.black]
line-length = 80
target-version = ["py310"]

#### coverage #################################################################
[tool.coverage.run]
branch = true
data_file = ".coverage/data"
parallel = true

[tool.coverage.report]
exclude_lines = ["# pragma: no cover", "@overload"]
fail_under = 100.0
skip_covered = true
skip_empty = true

[tool.coverage.html]
directory = ".coverage/html"

#### hatch ####################################################################
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
sources = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/photos"]

[tool.hatch.version]
path = "src/photos/__init__.py"

#### nitpick ##################################################################
[tool.nitpick]
style = [
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/common.toml",
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/3.10.toml",
  "https://raw.githubusercontent.com/dycw/nitpick/master/styles/pip-compile-no-hashes.toml",
]

#### project ##################################################################
[project]
name = "photos"
dynamic = ["version"]
readme = "README.md"
requires-python = ">= 3.10"
authors = [{ name = "Derek Wan", email = "d.wan@icloud.com" }]
dependencies = [
  "boltons >= 21.0.0, < 22",
  "dycw-utilities[atomicwrites,loguru,luigi,pandas] >= 0.5.3",
  "exif >= 1.5.0, < 2",
  "exifread >= 3.0.0, < 4",
  "humanize >= 4.2.1, < 5",
  "ipython >= 8.4.0, < 9",
  "jupyterlab >= 3.4.3, < 4",
  "jupyterlab-vim >= 0.15.1, < 1",
  "pillow >= 9.4.0, < 10",
  "pyexiv2 >= 2.7.1, < 3",
  "pyqt5 >= 5.15.7, < 6",
  "qtconsole >= 5.3.0, < 6",
  "tabulate >= 0.8.10, < 1",
]

[project.optional-dependencies]
dev = [
  "black",
  "exceptiongroup",
  "hatch",
  "hypothesis",
  "pip-tools",
  "pytest",
  "pytest-cov",
  "pytest-xdist",
  "ruff",
]

#### pyright ##################################################################
[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__", ".direnv", ".git", ".venv"]
pythonVersion = "3.10"
executionEnvironments = [{ root = "src" }]
typeCheckingMode = "strict"
reportMissingTypeStubs = false
reportIncompatibleMethodOverride = false
reportMissingTypeArgument = false
reportPrivateUsage = false
reportPrivateImportUsage = false
reportUnknownArgumentType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUntypedBaseClass = false
reportImplicitStringConcatenation = "error"
reportMissingSuperCall = "error"
reportPropertyTypeMismatch = "error"
reportUnnecessaryTypeIgnoreComment = "error"
reportUnusedCallResult = "error"

#### pytest ###################################################################
[tool.pytest.ini_options]
addopts = [
  "-rsxX",
  "--color=auto",
  "--cov=photos",
  "--cov-config=pyproject.toml",
  "--cov-report=html",
  "--strict-markers",
  "--tb=native"
]
filterwarnings = [
  "error",
  "ignore::DeprecationWarning",
  "ignore:Implicitly cleaning up <TemporaryDirectory '.*'>:ResourceWarning",
]
minversion = "7.0"
testpaths = ["src/tests"]
xfail_strict = true

#### ruff #####################################################################
[tool.ruff]
extend-ignore = [
  "ANN101", # flake8-annotations, missing-type-self
  "ANN401", # flake8-annotations, dynamically-typed-expression
  "D100", # pydocstyle, public-module
  "D104", # pydocstyle, public-package
  "D105", # pydocstyle, magic-method
  "D107", # pydocstyle, public-init
  "D203", # pydocstyle, pep8
  "D203", # pydocstyle, pep8
  "D212", # pydocstyle, pep8
  "D213", # pydocstyle, pep8
  "D214", # pydocstyle, pep8
  "D215", # pydocstyle, pep8
  "D401", # pydocstyle, non-imperative-mood
  "D404", # pydocstyle, pep8
  "D405", # pydocstyle, pep8
  "D406", # pydocstyle, pep8
  "D407", # pydocstyle, pep8
  "D408", # pydocstyle, pep8
  "D409", # pydocstyle, pep8
  "D410", # pydocstyle, pep8
  "D411", # pydocstyle, pep8
  "D413", # pydocstyle, pep8
  "D415", # pydocstyle, pep8
  "D416", # pydocstyle, pep8
  "D417", # pydocstyle, pep8
  "PD", # pandas-vet
  "PLR0913", # refactor, too-many-arguments
  "PT012", # flake8-pytest-style, raises-with-multiple-statements
  "PT013", # flake8-pytest-style, incorrect-pytest-import
  "TCH001", # flake8-type-checking, typing-only-first-party-import
  "TCH002", # flake8-type-checking, typing-only-third-party-import
  "TCH003", # flake8-type-checking, typing-only-standard-library-import
  "TRY200", # tryceratops, reraise-no-cause
  "TRY301", # tryceratops, raise-within-try

]
extend-select = ["ALL"]
line-length = 80
src = ["src", "tests"]
target-version = "py310"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"src/tests/**/*.py" = [
  "D", # pydocstyle
  "FBT001", # flake8-boolean-trap, boolean-positional-arg-in-function-definition
  "FBT003", # flake8-boolean-trap, boolean-positional-value-in-function-call
  "PLR2004", # refactor, magic-value-comparison
  "S101", # flake8-bandit, assert-used

]

[tool.ruff.pydocstyle]
convention = "numpy"
